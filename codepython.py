# -*- coding: utf-8 -*-
"""Codepython.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/185aFuJaK8ksIJnwktih3fxlVUBItJF4n
"""

class Employee:
    """Represents an employee."""
    def __init__(self, employee_id, name, department, job_title, basic_salary, date_of_birth, age, passport_details, manager=None):
        """
        Initializes an Employee object.

        Parameters:
        employee_id (int): The unique identifier for the employee.
        name (str): The name of the employee.
        department (str): The department the employee belongs to.
        job_title (str): The job title of the employee.
        basic_salary (float): The basic salary of the employee.
        date_of_birth (str): The date of birth of the employee (format: "YYYY-MM-DD").
        age (int): The age of the employee.
        passport_details (str): Details of the employee's passport.
        manager (Employee or None): The manager of the employee.
        """
        self.employee_id = employee_id
        self.name = name
        self.department = department
        self.job_title = job_title
        self.basic_salary = basic_salary
        self.date_of_birth = date_of_birth
        self.age = age
        self.passport_details = passport_details
        self.manager = manager

class Manager(Employee):
    """Represents a manager, inheriting from Employee."""
    def __init__(self, employee_id, name, department, job_title, basic_salary, date_of_birth, age, passport_details):
        """
        Initializes a Manager object.

        Parameters:
        Same as Employee.
        """
        super().__init__(employee_id, name, department, job_title, basic_salary, date_of_birth, age, passport_details)

class Client:
    """Represents a client."""
    def __init__(self, client_id, name, address, contact_details, budget):
        """
        Initializes a Client object.

        Parameters:
        client_id (int): The unique identifier for the client.
        name (str): The name of the client.
        address (str): The address of the client.
        contact_details (str): Contact details of the client.
        budget (float): Budget allocated for the client.
        """
        self.client_id = client_id
        self.name = name
        self.address = address
        self.contact_details = contact_details
        self.budget = budget

class Guest:
    """Represents a guest."""
    def __init__(self, guest_id, name, address, contact_details):
        """
        Initializes a Guest object.

        Parameters:
        guest_id (int): The unique identifier for the guest.
        name (str): The name of the guest.
        address (str): The address of the guest.
        contact_details (str): Contact details of the guest.
        """
        self.guest_id = guest_id
        self.name = name
        self.address = address
        self.contact_details = contact_details

class Event:
    """Represents an event."""
    def __init__(self, event_id, event_type, theme, date, time, duration, venue, client):
        """
        Initializes an Event object.

        Parameters:
        event_id (int): The unique identifier for the event.
        event_type (str): Type of the event (e.g., wedding, birthday).
        theme (str): Theme of the event.
        date (str): Date of the event (format: "YYYY-MM-DD").
        time (str): Time of the event (format: "HH:MM").
        duration (int): Duration of the event in hours.
        venue (Venue): Venue object representing the event venue.
        client (Client): Client object representing the event client.
        """
        self.event_id = event_id
        self.event_type = event_type
        self.theme = theme
        self.date = date
        self.time = time
        self.duration = duration
        self.venue = venue
        self.client = client
        self.guests = []

    def add_guest(self, guest):
        """
        Adds a guest to the event.

        Parameters:
        guest (Guest): Guest object to be added to the event.
        """
        self.guests.append(guest)

class Venue:
    """Represents a venue."""
    def __init__(self, venue_id, name, address, contact_details, min_capacity, max_capacity):
        """
        Initializes a Venue object.

        Parameters:
        venue_id (int): The unique identifier for the venue.
        name (str): The name of the venue.
        address (str): The address of the venue.
        contact_details (str): Contact details of the venue.
        min_capacity (int): Minimum capacity of the venue.
        max_capacity (int): Maximum capacity of the venue.
        """
        self.venue_id = venue_id
        self.name = name
        self.address = address
        self.contact_details = contact_details
        self.min_capacity = min_capacity
        self.max_capacity = max_capacity

class Supplier:
    """Represents a supplier."""
    def __init__(self, supplier_id, name, address, contact_details):
        """
        Initializes a Supplier object.

        Parameters:
        supplier_id (int): The unique identifier for the supplier.
        name (str): The name of the supplier.
        address (str): The address of the supplier.
        contact_details (str): Contact details of the supplier.
        """
        self.supplier_id = supplier_id
        self.name = name
        self.address = address
        self.contact_details = contact_details

class EventSupplier:
    """Represents the association between events and suppliers."""
    def __init__(self, event, supplier, service_type):
        """
        Initializes an EventSupplier object.

        Parameters:
        event (Event): Event object.
        supplier (Supplier): Supplier object.
        service_type (str): Type of service provided by the supplier for the event.
        """
        self.event = event
        self.supplier = supplier
        self.service_type = service_type


# Test Cases
if __name__ == "__main__":
    # Create Employees
    emp1 = Employee(1, "John Doe", "HR", "HR Manager", 50000, "1990-01-01", 34, "12345", None)
    emp2 = Manager(2, "Jane Smith", "Sales", "Sales Manager", 60000, "1985-05-05", 40, "67890")

    # Create Clients
    client1 = Client(1, "ABC Corp", "123 Main St", "123-456-7890", 100000)
    client2 = Client(2, "XYZ Inc", "456 Oak St", "987-654-3210", 150000)

    # Create Guests
    guest1 = Guest(1, "Alice", "789 Elm St", "111-222-3333")
    guest2 = Guest(2, "Bob", "321 Pine St", "444-555-6666")

    # Create Venues
    venue1 = Venue(1, "Grand Hall", "100 Broadway", "555-123-4567", 50, 200)
    venue2 = Venue(2, "City Garden", "200 Park Ave", "555-987-6543", 20, 100)

    # Create Suppliers
    supplier1 = Supplier(1, "Catering Co", "789 Maple St", "999-888-7777")
    supplier2 = Supplier(2, "Decoration Inc", "654 Cherry St", "333-222-1111")

    # Create Events
    event1 = Event(1, "wedding", "Classic", "2024-06-15", "15:00", 4, venue1, client1)
    event2 = Event(2, "birthday", "Superhero", "2024-07-20", "18:00", 3, venue2, client2)

    # Add Guests to Events
    event1.add_guest(guest1)
    event1.add_guest(guest2)
    event2.add_guest(guest1)

    # Create Event Suppliers
    event_supplier1 = EventSupplier(event1, supplier1, "catering")
    event_supplier2 = EventSupplier(event2, supplier2, "decoration")

    # Print some information for demonstration
    print("Employee 1:", emp1.name)
    print("Employee 2:", emp2.name)
    print("Client 1:", client1.name)
    print("Client 2:", client2.name)
    print("Event 1 Guests:", [guest.name for guest in event1.guests])
    print("Event 2 Guests:", [guest.name for guest in event2.guests])

# @title Default title text
class DatabaseManager:
    def __init__(self, employees, events, clients, guests, venues, suppliers):
        self.employees = []
        self.events = []
        self.clients =  []
        self.guests =  []
        self.venues =  []
        self.suppliers =  []

    def add_entity(self, entity_type, **kwargs):
        if entity_type == "employee":
            self.employees.append(Employee(**kwargs))
        elif entity_type == "event":
            self.events.append(Event(**kwargs))
        elif entity_type == "client":
            self.clients.append(Client(**kwargs))
        elif entity_type == "guest":
            self.guests.append(Guest(**kwargs))
        elif entity_type == "venue":
            self.venues.append(Venue(**kwargs))
        elif entity_type == "supplier":
            self.suppliers.append(Supplier(**kwargs))

    def delete_entity(self, entity_type, id_number):
        entities = getattr(self, entity_type + "s")
        for i, item in enumerate(entities):
                print(f"{entity_type.capitalize()} with ID: {id_number} deleted successfully.")
                break
        else:
            print(f"No {entity_type.capitalize()} found with ID: {id_number}")

    def modify_entity_details(self, entity_type, id_number, **kwargs):
        entities = getattr(self, entity_type + "s")
        for item in entities:
            if item.entity_id == id_number:
                for key, value in kwargs.items():
                    setattr(item, key, value)
                print(f"{entity_type } details modified successfully.")
                break
        else:
            print(f"No {entity_type } found with ID: {id_number}")

    def display_entity_details(self, entity_type, id_number):
       if entity_type == "employee":
            self.employees.append(Employee(**kwargs))
        elif entity_type == "event":
            self.events.append(Event(**kwargs))
        elif entity_type == "client":
            self.clients.append(Client(**kwargs))
        elif entity_type == "guest":
            self.guests.append(Guest(**kwargs))
        elif entity_type == "venue":
            self.venues.append(Venue(**kwargs))
        elif entity_type == "supplier":
        entities = getattr(self, entity_type + "s")
        for item in entities:
            if item.entity_id == id_number:
                print(item.__dict__)
                break
        else:
            print(f"No {entity_type.capitalize()} found with ID: {id_number}")

def main():
    # Initialize database
    manager = DatabaseManager(employees=[], events=[], clients=[], guests=[], venues=[], suppliers=[])

    while True:
        print("\nDatabase Menu:")
        print("1. Add Employee")
        print("2. Add Event")
        print("3. Add Client")
        print("4. Add Guest")
        print("5. Add Venue")
        print("6. Add Supplier")
        print("7. Delete Employee")
        print("8. Delete Event")
        print("9. Delete Client")
        print("10. Delete Guest")
        print("11. Delete Venue")
        print("12. Delete Supplier")
        print("13. Modify Employee Details")
        print("14. Modify Event Details")
        print("15. Modify Client Details")
        print("16. Modify Guest Details")
        print("17. Modify Venue Details")
        print("18. Modify Supplier Details")
        print("19. Display Employee Details by ID")
        print("20. Display Event Details by ID")
        print("21. Display Client Details by ID")
        print("22. Display Guest Details by ID")
        print("23. Display Venue Details by ID")
        print("24. Display Supplier Details by ID")
        print("25. Exit")

        choice = input("Enter your choice: ")

        if choice == "1":

            # Input employee details
            employee_id = input("Enter Employee ID: ")
            name = input("Enter Employee Name: ")
            department = input("Enter Department: ")
            job_title = input("Enter Job Title: ")
            basic_salary = float(input("Enter Basic Salary: "))
            date_of_birth = input("Enter Date of Birth (YYYY-MM-DD): ")
            age = int(input("Enter Age: "))
            passport_details = input("Enter Passport Details: ")
            manager = input("Enter Manager ID (if any, else leave blank): ")
            manager = manager if manager else None
            #11manager = next((emp for emp in manager.employees if emp.employee_id == manager), None)
            kwargs = {
                "employee_id": employee_id,
                "name": name,
                "department": department,
                "job_title": job_title,
                "basic_salary": basic_salary,
                "date_of_birth": date_of_birth,
                "age": age,
                "passport_details": passport_details,
                "manager": manager
            }
            s  = DatabaseManager("employees", "events", "client", "guests", "venues", "suppliers")
            s.add_entity("employee", **kwargs)
          #1  manager.add_entity("employee", **kwargs)  # Pass employee details as kwargs
        elif choice == "2":
            manager.add_entity("event", **kwargs)  # Pass event details as kwargs
        elif choice == "3":
            manager.add_entity("client", **kwargs)  # Pass client details as kwargs
        elif choice == "4":
            manager.add_entity("guest", **kwargs)  # Pass guest details as kwargs
        elif choice == "5":
            manager.add_entity("venue", **kwargs)  # Pass venue details as kwargs
        elif choice == "6":
            manager.add_entity("supplier", **kwargs)  # Pass supplier details as kwargs
        elif choice == "7":
            manager.delete_entity("employee", id_number)  # Pass employee ID number
        elif choice == "8":
            manager.delete_entity("event", id_number)  # Pass event ID number
        elif choice == "9":
            manager.delete_entity("client", id_number)  # Pass client ID number
        elif choice == "10":
            manager.delete_entity("guest", id_number)  # Pass guest ID number
        elif choice == "11":
            manager.delete_entity("venue", id_number)  # Pass venue ID number
        elif choice == "12":
            manager.delete_entity("supplier", id_number)  # Pass supplier ID number
        elif choice == "13":
            manager.modify_entity_details("employee", id_number, **kwargs)  # Pass employee ID number and details as kwargs
        elif choice == "14":
            manager.modify_entity_details("event", id_number, **kwargs)  # Pass event ID number and details as kwargs
        elif choice == "15":
            manager.modify_entity_details("client", id_number, **kwargs)  # Pass client ID number and details as kwargs
        elif choice == "16":
            manager.modify_entity_details("guest", id_number, **kwargs)  # Pass guest ID number and details as kwargs
        elif choice == "17":
            manager.modify_entity_details("venue", id_number, **kwargs)  # Pass venue ID number and details as kwargs
        elif choice == "18":
            manager.modify_entity_details("supplier", id_number, **kwargs)  # Pass supplier ID number and details as kwargs
        elif choice == "19":
            manager.display_entity_details("employee", id_number)  # Pass employee ID number
        elif choice == "20":
            manager.display_entity_details("event", id_number)  # Pass event ID number
        elif choice == "21":
            manager.display_entity_details("client", id_number)  # Pass client ID number
        elif choice == "22":
            manager.display_entity_details("guest", id_number)  # Pass guest ID number
        elif choice == "23":
            manager.display_entity_details("venue", id_number)  # Pass venue ID number
        elif choice == "24":
            manager.display_entity_details("supplier", id_number)  # Pass supplier ID number
        elif choice == "25":
            print("Exiting...")
            break
        else:
            print("Invalid choice. Please enter a number between 1 and 25.")

if __name__ == "__main__":
    main()

import pickle

# Sample data to be stored
employees = [
    {"id": 1, "name": "John Doe", "department": "HR"},
    {"id": 2, "name": "Jane Smith", "department": "Marketing"}
]

events = [
    {"id": 1, "type": "Wedding", "date": "2024-06-15"},
    {"id": 2, "type": "Birthday", "date": "2024-07-20"}
]

# Define functions to save and load data to/from binary files
def save_data(data, filename):
    with open(filename, 'wb') as file:
        pickle.dump(data, file)

def load_data(filename):
    with open(filename, 'rb') as file:
        data = pickle.load(file)
    return data

# Save data to binary files
save_data(employees, 'employees.pkl')
save_data(events, 'events.pkl')

# Load data from binary files
loaded_employees = load_data('employees.pkl')
loaded_events = load_data('events.pkl')

# Print loaded data for verification
print("Loaded Employees:")
print(loaded_employees)

print("\nLoaded Events:")
print(loaded_events)